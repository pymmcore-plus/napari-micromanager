name: Run Tests

on:
  push:
    branches: [main]
    tags: [v*]
  pull_request:
  schedule:
    - cron: "0 16 * * 1" # monday at noon est

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: py${{ matrix.python-version }} ${{ matrix.backend }} ${{ matrix.platform }}
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11"]
        backend: [pyside2, pyqt5]
        include:
          - python-version: "3.8"
            platform: windows-latest
            backend: pyqt5
          - python-version: "3.11"
            platform: macos-latest
            backend: pyqt6
          - python-version: "3.11"
            platform: ubuntu-latest
            backend: pyqt5
        exclude:
          - python-version: "3.11"
            backend: pyside2

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - uses: tlambert03/setup-qt-libs@v1

      - name: Install Windows OpenGL
        if: runner.os == 'Windows'
        run: |
          git clone --depth 1 https://github.com/pyvista/gl-ci-helpers.git
          powershell gl-ci-helpers/appveyor/install_opengl.ps1

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e .[test,${{ matrix.backend }}]

      - name: Set cache path
        shell: bash
        run: |
          echo "CACHE_PATH=$(python -c 'from pymmcore_plus import install; print(install.USER_DATA_MM_PATH)')" >> $GITHUB_ENV
          echo "CACHE_KEY=$(date +'%Y%m')" >> $GITHUB_ENV  # invalidate cache each month

      - name: Cache Drivers
        id: cache-mm-build
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_PATH }}
          key: ${{ runner.os }}-mmbuild-${{ env.CACHE_KEY }}

      - name: Build Micro-Manager (Linux)
        if: runner.os == 'Linux' && steps.cache-mm-build.outputs.cache-hit != 'true'
        run: mmcore build-dev

      - name: Install Micro-Manager
        if: runner.os != 'Linux' && steps.cache-mm-build.outputs.cache-hit != 'true'
        run: mmcore install

      - name: Test
        uses: GabrielBB/xvfb-action@v1
        with:
          run: python -m pytest -v --color=yes --cov=napari_micromanager --cov-report=xml

      - name: Coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  deploy:
    name: Deploy
    needs: test
    if: "success() && startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: install
        run: |
          git tag
          pip install --upgrade pip
          pip install -U build twine check-manifest
          check-manifest
          python -m build

      - name: twine check
        run: |
          twine check dist/*
          ls -lh dist

      - name: Build and publish
        run: twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_API_KEY }}

      - uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
