name: Run Tests

on:
  push:
    branches: [main]
    tags: [v*]
  pull_request:
  schedule:
    - cron: "0 16 * * 1" # monday at noon est

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: py${{ matrix.python-version }} ${{ matrix.backend }} ${{ matrix.platform }}
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, macos-13]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        backend: [pyqt5]
        include:
          - python-version: "3.11"
            platform: macos-13
            backend: pyqt6
          - python-version: "3.11"
            platform: ubuntu-latest
            backend: pyqt5
          - python-version: "3.10"
            platform: windows-latest
            backend: pyside2

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - uses: pyvista/setup-headless-display-action@main
        with:
          qt: true

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e .[test,${{ matrix.backend }}]

      - name: Set cache path
        shell: bash
        run: |
          echo "CACHE_PATH=$(python -c 'from pymmcore_plus import install; print(install.USER_DATA_MM_PATH)')" >> $GITHUB_ENV
          echo "CACHE_KEY=$(date +'%Y%m')" >> $GITHUB_ENV  # invalidate cache each month

      - name: Cache Drivers
        id: cache-mm-build
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_PATH }}
          key: ${{ runner.os }}-mmbuild-${{ env.CACHE_KEY }}

      - name: Build Micro-Manager (Linux)
        if: runner.os == 'Linux' && steps.cache-mm-build.outputs.cache-hit != 'true'
        run: mmcore build-dev

      - name: Install Micro-Manager
        if: runner.os != 'Linux' && steps.cache-mm-build.outputs.cache-hit != 'true'
        run: mmcore install

      - name: Test
        run: python -m pytest -v --color=yes --cov=napari_micromanager --cov-report=xml

      - name: Coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  deploy:
    name: Deploy
    needs: test
    if: "success() && startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: ðŸ‘· Build
        run: |
          python -m pip install build check-manifest
          check-manifest
          python -m build
      - name: ðŸš¢ Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

      - uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: "./dist/*"
