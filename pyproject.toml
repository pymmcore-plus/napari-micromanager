# https://peps.python.org/pep-0517/
[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

# https://peps.python.org/pep-0621/
[project]
name = "napari-micromanager"
description = "Micro-Manager GUI interface in napari."
keywords = ["microscope", "micro-manager", "remote", "multi-processing"]
readme = "README.md"
requires-python = ">=3.8"
license = { text = "BSD 3-Clause License" }
authors = [
    { name = "Federico Gasparoli", email = "federico.gasparoli@gmail.com" },
    { name = "Talley Lambert", email = "talley.lambert@gmail.com" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Framework :: napari",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Topic :: System :: Hardware",
    "Topic :: System :: Hardware :: Hardware Drivers",
    "Topic :: Utilities",
]

dynamic = ["version"]
dependencies = [
    "napari >=0.4.13",
    "pymmcore-plus >=0.6.3",
    "useq-schema >=0.1.0",
    "superqt >=0.3.1",
    "fonticon-materialdesignicons6",
    "tifffile",
    "zarr",
    "pymmcore-widgets >=0.2.0",
]

# extras
# https://peps.python.org/pep-0621/#dependencies-optional-dependencies
[project.optional-dependencies]
testing = ["pytest", "pytest-cov", "pytest-qt"]
pyqt5 = ["PyQt5"]
pyside2 = ["PySide2"]
dev = ["black", "isort", "mda-simulator", "mypy", "pre-commit", "ruff"]

[project.urls]
Source = "https://github.com/pymmcore-plus/napari-micromanager"
Tracker = "https://github.com/pymmcore-plus/napari-micromanager/issues"
# Documentation = "https://pymmcore-plus.github.io/napari-micromanager"

[project.scripts]
napari-micromanager = "napari_micromanager.__main__:main"

[project.entry-points."napari.manifest"]
"napari-micromanager" = "napari_micromanager:napari.yaml"

# https://hatch.pypa.io/latest/config/metadata/
[tool.hatch.version]
source = "vcs"

[tool.hatch.build.targets.sdist]
include = ["/src", "/tests"]

# https://github.com/charliermarsh/ruff
[tool.ruff]
line-length = 88
target-version = "py38"
extend-select = [
    "E",    # style errors
    "F",    # flakes
    "D",    # pydocstyle
    "I001", # isort
    "U",    # pyupgrade
    # "N",  # pep8-naming
    "S",    # bandit
    "C",    # flake8-comprehensions
    "B",    # flake8-bugbear
    "A001", # flake8-builtins
    "RUF",  # ruff-specific rules
]
extend-ignore = [
    "D100", # Missing docstring in public module
    "D107", # Missing docstring in __init__
    "D203", # 1 blank line required before class docstring
    "D212", # Multi-line docstring summary should start at the first line
    "D213", # Multi-line docstring summary should start at the second line
    "D400", # First line should end with a period
    "D413", # Missing blank line after last section
    "D416", # Section name should end with a colon
    "C901", # Function is too complex
]

[tool.ruff.per-file-ignores]
"tests/*.py" = ["D", "S"]

# https://docs.pytest.org/en/6.2.x/customize.html
[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore:distutils Version classes are deprecated",
    "ignore::DeprecationWarning:ipykernel",
    "ignore:<tifffile.TiffWriter.write> data with shape:DeprecationWarning:", # for napari
]

# https://mypy.readthedocs.io/en/stable/config_file.html
[tool.mypy]
files = "src/**/*.py"
strict = true
disallow_any_generics = false
disallow_subclassing_any = false
show_error_codes = true
pretty = true

[[tool.mypy.overrides]]
module = ["qtpy.*", "pymmcore_widgets.*", "superqt.*", "napari.*", "zarr.*", "tifffile.*"]
ignore_missing_imports = true

# https://github.com/mgedmin/check-manifest#configuration
[tool.check-manifest]
ignore = [
    ".pre-commit-config.yaml",
    "launch-dev.py",
    "codecov.yml",
]

# https://coverage.readthedocs.io/en/6.4/config.html
[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "@overload",
    "except ImportError",
    "raise AssertionError",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "\\.\\.\\."
]

[tool.coverage.run]
source = ["src/napari_micromanager"]
